#!/usr/bin/env ruby
#/ Usage: posix-spawn-bm [-n <count>] [-m <mem-size>]
#/ Run posix-spawn (Ruby extension) benchmarks and report to standard output.
#/
#/ Options:
#/   -n, --count=NUM         total number of processes to spawn.
#/   -m, --mem-size=MB       RES size to bloat to before performing benchmarks.
#/
#/ Benchmarks run with -n 1000 -m 100 by default.
require 'optparse'
require 'posix-spawn'
require 'benchmark'
include Benchmark

allocate   = 100 * (1024 ** 2)
iterations = 1_000
ARGV.options do |o|
  o.set_summary_indent('  ')
  o.on("-n", "--count=num")   { |val| iterations = val.to_i }
  o.on("-m", "--mem-size=MB") { |val| allocate   = val.to_i * (1024 ** 2) }
  o.on_tail("-h", "--help")   { exec "grep ^#/ <'#{__FILE__}' |cut -c4-" }
  o.parse!
end

puts "benchmarking fork/exec vs. posix_spawn over #{iterations} runs" +
     " at #{allocate / (1024 ** 2)}M res"

# bloat the process
bloat = 'x' * allocate

# run the benchmarks
bm 40 do |x|
  x.report("fspawn (fork/exec):") do
    iterations.times do
      pid = POSIX::Spawn.fspawn('true')
      Process.wait(pid)
    end
  end
  x.report("pspawn (posix_spawn):") do
    iterations.times do
      pid = POSIX::Spawn.pspawn('true')
      Process.wait(pid)
    end
  end
end
